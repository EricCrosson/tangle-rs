#+property: tangle lib.rs
#+title: tangle

* use

  #+begin_src rust
  use std::path::Path;
  use std::path::PathBuf;

  use std::str::Lines;

  use std::fs;
  use std::io;
  use std::env;
  #+end_src

* utility

*** line_trim_indentation

    #+begin_src rust
    fn line_trim_indentation <'a> (
        mut line: &'a str,
        indentation: usize,
    ) -> &'a str {
        let mut counter = 0;
        while counter < indentation {
            if line.starts_with (' ') {
                counter += 1;
                line = &line[1..];
            } else {
                return line;
            }
        }
        line
    }
    #+end_src

* TangleError

  #+begin_src rust
  #[derive(Debug)]
  struct TangleError {
      report: String,
  }

  impl TangleError {
      fn new (report: &str) -> Self {
          TangleError {
              report: report.to_string (),
          }
      }
  }
  #+end_src
* File

*** File

    #+begin_src rust
    #[derive(Debug)]
    struct File {
        path: PathBuf,
        content: String,
    }
    #+end_src

*** File::read

    #+begin_src rust
    impl File {
        fn read (path: &Path) -> io::Result <File> {
            Ok (File {
                path: PathBuf::from (path),
                content: fs::read_to_string (path)?,
            })
        }
    }
    #+end_src

*** File::tangle

    #+begin_src rust
    impl File {
        fn tangle (&self) -> Option <File> {
            match self.extension () .as_str () {
                "org" => self.org_tangle (),
                "md"  => self.md_tangle (),
                _ => None
            }
        }
    }
    #+end_src

*** File::extension

    #+begin_src rust
    impl File {
        fn extension (&self) -> String {
            if let Some (os_string) = self.path.extension () {
                if let Some (str) = os_string.to_str () {
                    String::from (str)
                } else {
                    String::new ()
                }
            } else {
                String::new ()
            }
        }
    }
    #+end_src

*** File::org_tangle

    #+begin_src rust
    impl File {
        fn org_tangle (&self) -> Option <File> {
            if let Some (
                destination
            ) = org_find_destination (&self.content) {
                let mut path = PathBuf::new ();
                path.push (&self.path);
                path.pop ();
                path.push (destination);
                println! ("- org_tangle : {:?} => {:?}",
                          self.path, path);
                let content = org_tangle_content (
                    &self.content) .unwrap ();
                Some (File { path, content })
            } else {
                None
            }
        }
    }
    #+end_src

*** File::md_tangle

    #+begin_src rust
    impl File {
        fn md_tangle (&self) -> Option <File> {
            if let Some (
                destination
            ) = md_find_destination (&self.content) {
                let mut path = PathBuf::new ();
                path.push (&self.path);
                path.pop ();
                path.push (destination);
                println! ("- md_tangle : {:?} => {:?}",
                          self.path, path);
                let content = md_tangle_content (
                    &self.content) .unwrap ();
                Some (File { path, content })
            } else {
                None
            }
        }
    }
    #+end_src

*** File::write

    #+begin_src rust
    impl File {
        fn write (&self) -> io::Result <()> {
            fs::write (&self.path, &self.content)
        }
    }
    #+end_src

* org

*** org_property_line_p

    #+begin_src rust
    fn org_property_line_p (line: &str) -> bool {
        line .trim_start () .starts_with ("#+property:")
    }
    #+end_src

*** org_find_destination_in_property_line

    #+begin_src rust
    fn org_find_destination_in_property_line (
        line: &str,
    ) -> Option <String> {
        let mut words = line.split_whitespace ();
        while let Some (word) = words.next () {
            if word == "tangle" || word == ":tangle" {
                if let Some (destination) = words.next () {
                    return Some (destination.to_string ())
                }
            }
        }
        None
    }
    #+end_src

*** org_find_destination

    #+begin_src rust
    fn org_find_destination (string: &str) -> Option <String> {
        for line in string.lines () {
            if org_property_line_p (line) {
                let destination =
                    org_find_destination_in_property_line (line);
                if destination. is_some () {
                    return destination;
                }
            }
        }
        None
    }
    #+end_src

*** test_org_find_destination

    #+begin_src rust
    #[test]
    fn test_org_find_destination () {
        let example = "#+property: tangle lib.rs";
        let destination = org_find_destination (example) .unwrap ();
        assert_eq! (destination, "lib.rs");

        let example = "#+property: header-args :tangle lib.rs";
        let destination = org_find_destination (example) .unwrap ();
        assert_eq! (destination, "lib.rs");
    }
    #+end_src

*** org_block_begin_line_p

    #+begin_src rust
    fn org_block_begin_line_p (line: &str) -> bool {
        line .trim_start () .starts_with ("#+begin_src")
    }
    #+end_src

*** org_block_end_line_p

    #+begin_src rust
    fn org_block_end_line_p (line: &str) -> bool {
        line .trim_start () .starts_with ("#+end_src")
    }
    #+end_src

*** org_block_indentation

    #+begin_src rust
    fn org_block_indentation (line: &str) -> usize {
        let mut indentation = 0;
        for ch in line.chars () {
            if ch == ' ' {
                indentation += 1;
            } else {
                return indentation;
            }
        }
        0
    }
    #+end_src

*** org_collect_content

    #+begin_src rust
    fn org_collect_content (
        result: &mut String,
        lines: &mut Lines,
        indentation: usize,
    ) -> Result <(), TangleError> {
        for line in lines {
            if org_block_end_line_p (line) {
                result.push ('\n');
                return Ok (());
            } else {
                let line = line_trim_indentation (
                    line, indentation);
                result.push_str (line);
                result.push ('\n');
            }
        }
        let error = TangleError::new ("org_block_end mismatch");
        Err (error)
    }
    #+end_src

*** org_tangle_content

    #+begin_src rust
    fn org_tangle_content (string: &str) -> Result <String, TangleError> {
        let mut result = String::new ();
        let mut lines = string.lines ();
        while let Some (line) = lines.next () {
            if org_block_begin_line_p (line) {
                org_collect_content (
                    &mut result,
                    &mut lines,
                    org_block_indentation (line))?;
            }
        }
        result.pop ();
        Ok (result)
    }
    #+end_src

*** test_org_tangle_content

    #+begin_src rust
    #[test]
    fn test_org_tangle_content () {
        let example = format! (
            "{}\n{}\n{}\n{}\n",
            "#+begin_src rust",
            "hi",
            "hi",
            "#+end_src",
        );
        let expect = format! (
            "{}\n{}\n",
            "hi",
            "hi",
        );
        let result = org_tangle_content (&example) .unwrap ();
        assert_eq! (expect, result);

        let example = format! (
            "{}\n{}\n{}\n{}\n",
            "    #+begin_src rust",
            "    hi",
            "    hi",
            "    #+end_src",
        );
        let expect = format! (
            "{}\n{}\n",
            "hi",
            "hi",
        );
        let result = org_tangle_content (&example) .unwrap ();
        assert_eq! (expect, result);

        let example = format! (
            "{}\n{}\n{}\n{}\n",
            "#+begin_src rust",
            "    hi",
            "    hi",
            "#+end_src",
        );
        let expect = format! (
            "{}\n{}\n",
            "    hi",
            "    hi",
        );
        let result = org_tangle_content (&example) .unwrap ();
        assert_eq! (expect, result);
    }
    #+end_src

* md

*** md_meta_block_line_p

    #+begin_src rust
    fn md_meta_block_line_p (line: &str) -> bool {
        if ! line .trim_start () .starts_with ("---") {
            false
        } else {
            let string = line.trim ();
            string .chars () .all (|x| x == '-')
        }
    }
    #+end_src

*** md_meta_block_collect

    #+begin_src rust
    fn md_meta_block_collect (
        lines: &mut Lines,
    ) -> Option <String> {
        let mut result = String::new ();
        for line in lines {
            if md_meta_block_line_p (line) {
                return Some (result);
            } else {
                result.push_str (line);
                result.push ('\n');
            }
        }
        None
    }
    #+end_src

*** md_find_meta_block

    #+begin_src rust
    fn md_find_meta_block (string: &str) -> Option <String> {
        let mut lines = string.lines ();
        if let Some (first_line) = lines.next () {
            if md_meta_block_line_p (first_line) {
                md_meta_block_collect (&mut lines)
            } else {
                None
            }
        } else {
            None
        }
    }
    #+end_src

*** md_destination_line_p

    #+begin_src rust
    const MD_DESTINATION_PREFIX: &'static str = "tangle:";

    fn md_destination_line_p (line: &str) -> bool {
        line .trim_start () .starts_with (MD_DESTINATION_PREFIX)
    }
    #+end_src

*** md_find_destination

    #+begin_src rust
    fn md_find_destination (string: &str) -> Option <String> {
        let meta_block = md_find_meta_block (string);
        if meta_block.is_none () {
            return None;
        }
        let string = meta_block .unwrap ();
        for line in string.lines () {
            if md_destination_line_p (line) {
                let destination = &line [MD_DESTINATION_PREFIX.len () ..];
                let destination = destination.trim ();
                return Some (destination.to_string ());
            }
        }
        None
    }
    #+end_src

*** test_md_find_destination

    #+begin_src rust
    #[test]
    fn test_md_find_destination () {
        let example = format! (
            "{}\n{}\n{}\n",
            "---",
            "tangle: core.rs",
            "---",
        );
        let destination = md_find_destination (&example) .unwrap ();
        assert_eq! (destination, "core.rs");
    }
    #+end_src

*** md_block_begin_line_p

    #+begin_src rust
    fn md_block_begin_line_p (line: &str) -> bool {
        line .trim_start () .starts_with ("```")
    }
    #+end_src

*** md_block_end_line_p

    #+begin_src rust
    fn md_block_end_line_p (line: &str) -> bool {
        line .trim_start () .starts_with ("```")
    }
    #+end_src

*** md_collect_content

    #+begin_src rust
    fn md_collect_content (
        result: &mut String,
        lines: &mut Lines,
    ) -> Result <(), TangleError> {
        for line in lines {
            if md_block_end_line_p (line) {
                result.push ('\n');
                return Ok (());
            } else {
                result.push_str (line);
                result.push ('\n');
            }
        }
        let error = TangleError::new ("md_block_end mismatch");
        Err (error)
    }
    #+end_src

*** md_tangle_content

    #+begin_src rust
    fn md_tangle_content (string: &str) -> Result <String, TangleError> {
        let mut result = String::new ();
        let mut lines = string.lines ();
        while let Some (line) = lines.next () {
            if md_block_begin_line_p (line) {
                md_collect_content (&mut result, &mut lines)?;
            }
        }
        result.pop ();
        Ok (result)
    }
    #+end_src

*** test_md_tangle_content

    #+begin_src rust
    #[test]
    fn test_md_tangle_content () {
        let example = format! (
            "{}\n{}\n{}\n{}\n",
            "``` rust",
            "hi",
            "hi",
            "```",
        );
        let expect = format! (
            "{}\n{}\n",
            "hi",
            "hi",
        );
        let result = md_tangle_content (&example) .unwrap ();
        assert_eq! (expect, result);
        let example = format! (
            "{}\n{}\n{}\n{}\n",
            "    ``` rust",
            "    hi",
            "    hi",
            "    ```",
        );
        let expect = format! (
            "{}\n{}\n",
            "    hi",
            "    hi",
        );
        let result = md_tangle_content (&example) .unwrap ();
        assert_eq! (expect, result);
    }
    #+end_src

* interface

*** good_path_p

    #+begin_src rust
    fn good_path_p (path: &Path) -> bool {
        for component in path.iter () {
            if let Some (string) = component.to_str () {
                if string.starts_with ('.') {
                    if ! string .chars () .all (|x| x == '.') {
                        return false;
                    }
                }
            } else {
                return false;
            }
        }
        true
    }
    #+end_src

*** file_tangle

    #+begin_src rust
    pub fn file_tangle (path: &Path) -> io::Result <()> {
        if let Some (file) = File::read (path)? .tangle () {
            file.write ()
        } else {
            Ok (())
        }
    }
    #+end_src

*** dir_tangle

    #+begin_src rust
    pub fn dir_tangle (dir: &Path) -> io::Result <()> {
        for entry in dir.read_dir ()? {
            if let Ok (entry) = entry {
                if good_path_p (&entry.path ()) {
                    if entry.file_type ()? .is_file () {
                        file_tangle (&entry.path ())?
                    }
                }
            }
        }
        Ok (())
    }
    #+end_src

*** dir_tangle_rec

    #+begin_src rust
    pub fn dir_tangle_rec (dir: &Path) -> io::Result <()> {
        for entry in dir.read_dir ()? {
            if let Ok (entry) = entry {
                if good_path_p (&entry.path ()) {
                    if entry.file_type ()? .is_file () {
                        file_tangle (&entry.path ())?
                    } else if entry.file_type ()? .is_dir () {
                        dir_tangle_rec (&entry.path ())?
                    }
                }
            }
        }
        Ok (())
    }
    #+end_src

*** absolute_lize

    #+begin_src rust
    pub fn absolute_lize (path: &Path) -> PathBuf {
        if path.is_relative () {
            let mut absolute_path = env::current_dir () .unwrap ();
            absolute_path.push (path);
            absolute_path
        } else {
            path.to_path_buf ()
        }
    }
    #+end_src

*** tangle_all_before_build

    #+begin_src rust
    pub fn tangle_all_before_build () -> io::Result <()> {
        let path = Path::new (".");
        let current_dir = env::current_dir () .unwrap ();
        println! ("- tangle_all_before_build");
        println! ("  current_dir : {:?}", current_dir);
        let path = absolute_lize (&path);
        dir_tangle_rec (&path)
    }
    #+end_src
